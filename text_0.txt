Real Programmers Don’t Use Pascal
Back in the Golden Era of computers, it was easy to separate the men from the boys
(sometimes called “Real Men” and “Quiche Eaters,” respectively). During this period,
the Real Men were the ones who understood computer programming, and the Quiche
Eaters were the ones who didn’t. A real computer programmer said things like “do 10
i=1,10” and “abend,” and the rest of the world said things like “computers are too
complicated for me” and “I can’t relate to computers—they’re so impersonal.” A pre-
vious work, B. Feirstein’s Real Men Don’t Eat Quiche, a 1982 Pocket Books publica-
tion, points out that Real Men don’t “relate” to anything and aren’t afraid of being im-
personal.
But, times change. Today, we are faced with a world in which little old ladies can get
computerized microwave ovens, 12-year-old kids can blow Real Men out of the water
playing Asteroids and Pac-Man, and anyone can buy and understand his very own per-
sonal computer. The Real Programmer is in danger of being replaced by high school
students with trash-80s!
There are, however, differences between the typical high school junior Pac-Man player
and a Real Programmer. Knowing these differences may give kids something to as-
pire to—a role model, a father figure. It will also help keep Real Programmers em-
ployed.
The easiest way to determine who the Real Programmers are is by the programming
language they use. Real Programmers use fortran. Quiche Eaters use Pascal.
Niklaus Wirth, the designer of Pascal, was once asked, “How do you pronounce your
name?” “You can either call me by name, pronouncing it ‘Veert,’ or call me by value,
‘Worth,’” he replied. One can tell immediately from this comment that Niklaus Wirth
is a Quiche Eater. The only parameter passing mechanism endorsed by Real Program-
mers is call-by-value-return, as implemented in the ibm/370 fortran g and h compil-
ers. Real Programmers don’t need abstract concepts to get their jobs done; they are
perfectly happy with a keypunch, a fortran iv compiler, and a beer. Real Program-
mers do list processing, string manipulation, accounting (if they do it at all), and artifi-
cial intelligence programs in fortran.
If you can’t do it in fortran, do it in assembly language. If you can’t do it in assem-
bly language, it isn’t worth doing.
Computer science academicians have gotten into a structured programming rut during
the past few years. They claim that programs are more easily understood if some spe-
cial language constructs and techniques are used. They don’t all agree on exactly
which constructs, of course, and the examples they use to show their particular point of
view inv ariably fit on a single page of some obscure journal. When I got out of school,